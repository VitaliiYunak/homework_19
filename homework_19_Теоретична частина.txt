1. Визначення термінів.

XSS (Cross-Site Scripting) — це тип уразливості веб-додатків, яка дозволяє зловмисникам вставляти шкідливий JavaScript-код у веб-сторінки, що можуть бути виконані у браузері інших користувачів. Це може призвести до викрадення сесій користувачів, шкідливих перенаправлень тощо.

SQL Injection — це тип атаки, коли зловмисник вставляє шкідливий SQL-код в запит до бази даних. Це дозволяє зловмиснику змінювати, читати або видаляти дані з бази даних.

CSRF (Cross-Site Request Forgery) — це тип атаки, що змушує користувача виконувати небажані запити в контексті його сесії на іншому веб-сайті (наприклад, на сайті, де користувач вже авторизований). Це може призвести до виконання шкідливих дій, таких як зміна паролів або проведення фінансових операцій.

Clickjacking — це тип атаки, коли зловмисник розміщує приховану фрейм-сторінку на веб-сайті таким чином, що користувач, не підозрюючи, може натискати на елементи інтерфейсу, спричиняючи виконання шкідливих дій на іншій веб-сторінці.

Параметризовані запити — це метод запитів до бази даних, який використовує змінні замість безпосереднього вказування значень в SQL-запитах. Це допомагає уникнути SQL ін'єкцій, оскільки значення, що вводяться користувачем, не інтерпретуються як частина SQL-коду.

Middleware — це проміжне програмне забезпечення, яке працює між сервером і клієнтом, перехоплюючи запити та відповіді. У Django middleware використовується для обробки запитів, наприклад, для автентифікації, логування, обробки помилок тощо.

Salt — це випадкові дані, які додаються до пароля перед його хешуванням, щоб ускладнити атаку на паролі.

Hashing — це односпрямований процес перетворення вхідних даних (наприклад, паролів) в унікальний рядок фіксованої довжини, який не можна зворотно відновити в оригінальні дані.


2. Вразливості, до яких може бути схильний додаток на Django, та способи їх запобігання.

SQL Injection: Використовувати параметризовані запити або ORM Django, щоб уникнути ін'єкцій.
XSS: Використовувати шаблонізатор Django, який автоматично екранує введені дані, а також фільтрувати введення користувачів.
CSRF: Використовувати вбудований CSRF-токен в Django, щоб захистити форми від підробки запитів.
Погана конфігурація безпеки: Правильно налаштовувати безпеку. Використовувати django-secure.


3. Захист конфіденційних даних користувачів у Django:

Використовувати хешування паролів з додаванням salt.
Використовувати HTTPS для шифрування даних під час передачі.
Підключати додаткові механізми шифрування для чутливих даних, наприклад, шифрування полів за допомогою бібліотеки django-cryptography.
Зберігати паролі та інші конфіденційні дані у зашифрованому вигляді в базі даних.


4. Способи аутентифікації та авторизації користувачів у Django:

Стандартна аутентифікація: Django має вбудовану систему аутентифікації, яка використовує таблицю користувачів та механізми для реєстрації, входу та виходу з системи.
Переваги: Легко налаштувати, інтегрована з іншими частинами Django.
Недоліки: Не завжди підходить для складних сценаріїв, де потрібно використовувати сторонні сервіси аутентифікації.

Зовнішні механізми аутентифікації через сторонні сервіси (Google, Facebook).
Переваги: Легко інтегрувати з іншими платформами.
Недоліки: Залежність від зовнішніх провайдерів.


5. Безпека сесій користувачів:

Використовувати cookies з налаштуваннями HttpOnly, Secure, та SameSite для захисту від атак на сесії.
Обмежити термін дії сесій, регулярно поновлюючи токени.
Застосовувати механізм мультифакторної аутентифікації (MFA).


6. Заходи для захисту від DDoS атак:

Використовувати сервери з обмеженнями на кількість запитів.
Встановити систему кешування для зменшення навантаження.
Використовувати служби протидії DDoS, такі як Cloudflare.


7. Захист від CSRF:

Django має вбудований механізм захисту від CSRF, використовуючи CSRF токен у формах. Для кожної форми додається токен, який перевіряється при відправці запиту.


